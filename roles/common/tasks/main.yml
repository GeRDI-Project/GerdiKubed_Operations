# Copyright 2018 Tobias Weber weber@lrz.de
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Common tasks on every host
- name: Install additional requirements
  apt:
      pkg: "{{ item }}"
      state: latest
  with_items:
      - apt-transport-https
      - bash-completion
      - ca-certificates
      - curl
      - dbus
      - ipcalc
      - iproute2
      - netbase
      - nfs-common
      - python-dbus
      - python-dnspython
      - python-openssl

- name: Script to fix routing of internal interfaces
  copy:
    src: autoRepairRoutes.sh
    dest: /root/autoRepairRoutes.sh

- name: Fix routing of internal interfaces
  shell: bash /root/autoRepairRoutes.sh {{ K8S_INTERNAL_ROUTING_TABLE }} {{ NFS_SERVER_DOMAIN }} && sleep 2 && shutdown -r now
  async: 1
  poll: 0
  ignore_errors: true

- name: Waiting for server to reboot
  local_action: wait_for host={{ inventory_hostname }} port=22 state=started delay=8 timeout=300 connect_timeout=15

- name: Set hostname to {{ inventory_hostname }}
  hostname:
    name: "{{ inventory_hostname }}"
  when: SET_HOSTNAME

- name: Create k8s directories
  file:
    path: "{{ item.path }}"
    state: directory
    mode: "{{ item.mode }}"
  with_items:
    - { path: "{{ K8S_BASE_DIR    }}", mode: '0755' }
    - { path: "{{ K8S_CERT_FILES_DIR  }}", mode: '0755' }
    - { path: "{{ K8S_AUTH_FILES_DIR  }}", mode: '0755' }
    - { path: "{{ K8S_KEY_FILES_DIR  }}", mode: '0700' }
    - { path: "/etc/kubernetes/manifests", mode: '0755' }

- name: Install script to determine network configuration on runtime
  copy:
    src: printIface.sh
    dest: /root/printIface.sh

- name: Retrieve information for internal interface
  shell: bash /root/printIface.sh 2
  register: internalInterface

- name: Set facts for second interface
  set_fact:
    iface2:
      name: "{{ internalInterface.stdout.split(' ')[0] }}"
      ipv4: "{{ internalInterface.stdout.split(' ')[1] }}"
      gw:   "{{ internalInterface.stdout.split(' ')[2] }}"
      nw:   "{{ internalInterface.stdout.split(' ')[3] }}"
      mask: "{{ internalInterface.stdout.split(' ')[4] }}"

- name: Retrieve information for third interface
  shell: bash /root/printIface.sh 3
  register: thirdInterface
  ignore_errors: yes

- name: Set facts for third interface
  set_fact:
    iface3:
      name: "{{ thirdInterface.stdout.split(' ')[0] }}"
      ipv4: "{{ thirdInterface.stdout.split(' ')[1] }}"
      gw: "{{ thirdInterface.stdout.split(' ')[2] }}"
      nw: "{{ thirdInterface.stdout.split(' ')[3] }}"
      hw: "{{ thirdInterface.stdout.split(' ')[4] }}"
  when: thirdInterface.rc == 0

- name: Set fact for internal address (on first run)
  set_fact:
    internalIP: "{{ iface3.ipv4 }}"
  when: thirdInterface.rc == 0

- name: Set fact for internal address (on second+ run)
  set_fact:
    internalIP: "{{ iface2.ipv4 }}"
  when: thirdInterface.rc != 0

- name: Install server key and cert
  copy:
    src:  "{{ item.src  }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  with_items:
    - { src:  "{{ CONTROL_KEY_DIR}}/{{ inventory_hostname}}.key",
        dest: "{{ K8S_KEY_FILES_DIR }}/{{ inventory_hostname }}.key",
        mode: '0400' }
    - { src:  "{{ CONTROL_CERT_DIR}}/{{ inventory_hostname }}.crt.pem",
        dest: "{{ K8S_CERT_FILES_DIR }}/{{ inventory_hostname }}.crt.pem",
        mode: '0444' }
    - { src:  "{{ CONTROL_CERT_DIR}}/ca.crt.pem",
        dest: "{{ K8S_CERT_FILES_DIR }}/ca.crt.pem",
        mode: '0444' }
    - { src:  "{{ CONTROL_CERT_DIR}}/admin.crt.pem",
        dest: "{{ K8S_CERT_FILES_DIR }}/admin.crt.pem",
        mode: '0444' }
    - { src:  "{{ CONTROL_KEY_DIR}}/admin.key",
        dest: "{{ K8S_KEY_FILES_DIR }}/admin.key",
        mode: '0400' }

- name: Set kernel param (max_map_count) higher for elasticsearch
  sysctl:
    name: vm.max_map_count
    value: 262144
    state: present

- name: Mount NFS-Volume
  mount:
    path:   "{{ NFS_MOUNT_PATH }}"
    src:    "{{ NFS_VOLUME_PATH }}"
    fstype: nfs
    opts:   tcp,nolock,rsize=65536,wsize=65536,timeo=600,intr
    state:  mounted
