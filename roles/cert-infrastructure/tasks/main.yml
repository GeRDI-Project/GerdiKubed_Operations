# Copyright 2018 Tobias Weber weber@lrz.de
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Description:
# This role creates a ca ready infrastructure on a trusted host the localhost should be the default.
#
# [SAI-584] Force a recreation of all certificates (same FQDNs, different IPS
# will not be overwritten. Resulting in machines getting invalid certificates for their ips)
- name: Delete previous directory if it exists
  file:
    path: "{{ CONTROL_BASE_DIR }}"
    state: absent
  tags: [ 'never', 'force' ]

# Ignore errors, because some files might be unencrypted
- name: Decrypt all certificates locally using ansible-vault
  shell: "find {{ CONTROL_BASE_DIR }} -type f -exec ansible-vault decrypt --vault-password-file {{ ANSIBLE_VAULT_PASSWORD_DIR }} {} \\;"
  ignore_errors: true

# create canonical place for certs and keys on control machine
- name: Create directory structure for certs and keys on control machine
  file:
    path: "{{ item.path }}"
    state: directory
    mode: "{{ item.mode }}"
  with_items:
    - { path: "{{CONTROL_BASE_DIR}}"  , mode: '0700' }
    - { path: "{{CONTROL_CERT_DIR}}"  , mode: '0700' }
    - { path: "{{CONTROL_KEY_DIR}}"   , mode: '0700' }
    - { path: "{{CONTROL_CONFIG_DIR}}", mode: '0700' }
    - { path: "{{CONTROL_CSR_DIR}}"   , mode: '0700' }
    - { path: "{{CONTROL_CA_DIR}}"    , mode: '0700' }

- name: Initialize ca administration files
  file:
    path: "{{ CONTROL_CA_DIR }}/{{ item }}"
    state: touch
  with_items:
    - serial.txt
    - index.txt

- name: Check if serial numbers must be initialized
  stat:
    path: "{{ CONTROL_CA_DIR }}/serial.txt"
  register: serial

- name: Initialize serial numbers
  shell: "echo '01' > {{ CONTROL_CA_DIR }}/serial.txt"
  when: serial.stat.size == 0

# create keys and certs and sign them
- name: Create keys and certs and sign them
  include_tasks: createKeysAndCertsAndSignThem.yml
  vars:
    filename:   "{{ item.filename }}"
    cname:      "{{ item.cname }}"
    sign:       "{{ item.sign }}"
    type:       "{{ item.type }}"
    alt_names:  "{{ item.alt_names | default(None) }}"
  with_items:
    - cname:    "CA-Certificate"
      filename: "ca"
      sign:     False
      type:     "ca"
    - cname:    "Administrator"
      filename: "admin"
      sign:     True
      type:     "client"

- name: Create server keys and certs and sign them
  include_tasks: createKeysAndCertsAndSignThem.yml
  vars:
    filename: "{{ item }}"
    cname: "{{ item }}"
    sign: True
    type: server
    alt_names:
      - type: "DNS"
        name: "{{ item }}"
      - type: "IP"
        name: "{{ lookup('dig', item, 'qtype=A') }}"
      - type: "IP"
        name: "{{ K8S_SERVICE_IP_PRE }}.0.1"
      - type: "IP"
        name: "{{ K8S_CLUSTER_IP_PRE }}.0.2"
      - type: "IP"
        name: "{{ hostvars[item]['altIP'] | default(lookup('dig', item, 'qtype=A')) }}"
  with_items:
    - "{{ groups['kubernetes_masters'] }}"
    - "{{ groups['kubernetes_nodes'] }}"

# Ignore errors, because some files might already be encrypted
- name: Encrypt all certificates locally using ansible-vault
  shell: "find {{ CONTROL_BASE_DIR }} -type f -exec ansible-vault encrypt --vault-password-file {{ ANSIBLE_VAULT_PASSWORD_DIR }} {} \\;"
  ignore_errors: true
