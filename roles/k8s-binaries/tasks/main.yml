- name: Download and Unpack k8s release
  unarchive:
    src: "{{ K8S_DOWNLOAD_URL }}"
    dest: "{{ K8S_BASE_DIR }}"
    copy: no
    creates: "{{ K8S_K8S_DIR }}/LICENSES"

- name: Download k8s binaries
  shell: "export KUBERNETES_SKIP_CONFIRM=yes; bash {{ K8S_K8S_DIR }}/cluster/get-kube-binaries.sh"
  args:
    creates: "{{ K8S_K8S_DIR }}/client/kubernetes-client-linux-amd64.tar.gz"

- name: Unpack server binaries
  unarchive:
    src:  "{{ K8S_K8S_DIR }}/server/kubernetes-server-linux-amd64.tar.gz"
    dest: "{{ K8S_K8S_DIR }}/server"
    copy: no
    creates: "{{ K8S_K8S_DIR }}/server/kubernetes/server/bin/kubectl"

- name: Create kubectl symlink
  file:
    src: "{{ K8S_SERVER_BIN_DIR }}/kubectl"
    dest: "/usr/bin/kubectl"
    state: link

- name: Create kubeconfig file
  template:
    src:  "kubeconfig.j2"
    dest: "{{ K8S_KUBECONFIG }}"

# We pipe through cat to set rc to 0, otherwise task fails (not elegant, but effective)
- name: Check whether helper script must be registered
  shell: grep "{{ K8S_KUBECONFIG }}" /root/.profile | cat
  register: k8s_kubeconfig_present

- name: Include KUBECONFIG variable in root's profile
  lineinfile:
    path: "/root/.profile"
    line: "export KUBECONFIG={{ K8S_KUBECONFIG }}"
    state: present
    insertafter: EOF
  when: k8s_kubeconfig_present.stdout == ""

- name: Check if kubectl autocompletion is already installed
  shell: grep "source <(kubectl completion bash)" /root/.profile | cat
  register: k8s_kubectl_autocompletion

- name: Install bash autocompletion for kubectl
  lineinfile:
    path: "/root/.profile"
    line: "source <(kubectl completion bash)"
    state: present
    insertafter: EOF
  when: k8s_kubectl_autocompletion.stdout == ""
